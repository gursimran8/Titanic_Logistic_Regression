# -*- coding: utf-8 -*-
"""Titanic_Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wn5J0TY2qLoW3VEr6yradldOx1K5RxtX
"""

import seaborn as sns
import pandas as pd

data=sns.load_dataset("titanic")

data.head(2)

data.info()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
vdata.head()

vdata=data
vdata["sex"]=vdata["sex"].map({"male":1,"female":0})
bar_plot=sns.barplot(x="class",y="sex",data=vdata,hue="who")
# for p in bar_plot.patches:
#     bar_plot.annotate(format(p.get_height(), '.2f'), X
#                       (p.get_x() + p.get_width() / 2., p.get_height()),
#                       ha = 'center', va = 'center',
#                       xytext = (0, 9),
#                       textcoords = 'offset points')

vdata.info()

for i in vdata.columns:
    if vdata[i].dtype == 'str' or vdata[i].dtype == 'bool' or vdata[i].dtype == 'category' or vdata[i].dtype=="object":
        vdata[i] = le.fit_transform(vdata[i])
    else:
        pass

vdata.corr()

sns.heatmap(vdata.corr(),cmap="Blues")

Zdata=data
Zdata.drop(columns=["class","deck","who","embark_town","alive","alone",],inplace=True)

from sklearn.preprocessing import LabelEncoder,StandardScaler

le=LabelEncoder()

data["embarked"]=le.fit_transform(data["embarked"])
data["sex"]=le.fit_transform(data["sex"])

data["age"]=data["age"].fillna(data["age"].median())

x=data
x=x.drop("survived",axis=1)
y=data["survived"]

scaler=StandardScaler()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

x_train.head()

x_train_scaled=scaler.fit_transform(x_train)

x_test_scaled=scaler.fit_transform(x_test)

from sklearn.linear_model import LogisticRegression
logreg=LogisticRegression(max_iter=1000)

logreg.fit(x_train_scaled,y_train)

y_pred=logreg.predict(x_test_scaled)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
accuracy=accuracy_score(y_pred,y_test)

a=round(accuracy,2)
print(a*100)

cm=confusion_matrix(y_pred,y_test)

cm

report=classification_report(y_pred,y_test)

print(report)



